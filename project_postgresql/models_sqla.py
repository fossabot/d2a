# Code generated by d2a (https://github.com/walkframe/d2a).
# `/root/.tox/cov/bin/py.test --junitxml=/root/.junit.xml --cov=d2a` at Sun Apr 18 13:58:59 2021 UTC.


from importlib import import_module

import sqlalchemy as sa
from sqlalchemy import types as default_types
from sqlalchemy.dialects import (
    postgresql as postgresql_types,
    mysql as mysql_types,
    oracle as oracle_types,
)
from sqlalchemy.ext.declarative import declarative_base
try:
    from geoalchemy2 import types as geotypes
except ImportError:
    pass



Base = declarative_base()


class CIText(default_types.String):
    '''DO NOT DELETE THIS CLASS'''
    __visit_name__ = 'CITEXT'


def GET_DEFAULT(path):
    '''DO NOT DELETE THIS FUNCTION'''

    module_path, model_name, field_name = path.rsplit(".", 2)
    try:
        module = import_module(module_path)
        model = getattr(module, model_name)
    except (ImportError, AttributeError):
        return None

    for field in model._meta.fields:
        if field.name == field_name:
            return field.default






class ContentType(Base):
    __tablename__ = 'django_content_type'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    app_label = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    model = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class LogEntry(Base):
    __tablename__ = 'django_admin_log'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    action_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        default=GET_DEFAULT('django.contrib.admin.models.LogEntry.action_time'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    object_id = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    object_repr = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    action_flag = sa.Column(
        postgresql_types.SMALLINT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    change_message = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[django_admin_log.c.user_id]",
        remote_side=None,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[django_admin_log.c.content_type_id]",
        remote_side=None,
    )


class GroupPermissions(Base):
    __tablename__ = 'auth_group_permissions'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[auth_group_permissions.c.group_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Group(Base):
    __tablename__ = 'auth_group'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    permissions = sa.orm.relationship(
        'Permission',
        secondary="auth_group_permissions",
        foreign_keys="[auth_group_permissions.c.group_id, auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Permission(Base):
    __tablename__ = 'auth_permission'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    codename = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[auth_permission.c.content_type_id]",
        remote_side=None,
    )


class UserGroups(Base):
    __tablename__ = 'auth_user_groups'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[auth_user_groups.c.user_id]",
        remote_side=None,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[auth_user_groups.c.group_id]",
        remote_side=None,
    )


class UserUserPermissions(Base):
    __tablename__ = 'auth_user_user_permissions'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[auth_user_user_permissions.c.user_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[auth_user_user_permissions.c.permission_id]",
        remote_side=None,
    )


class User(Base):
    __tablename__ = 'auth_user'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    password = sa.Column(
        postgresql_types.VARCHAR(length=128),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_login = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    is_superuser = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_superuser'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    username = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    first_name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    email = sa.Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_staff = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_staff'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_active = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_active'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    date_joined = sa.Column(
        postgresql_types.TIMESTAMP(),
        default=GET_DEFAULT('django.contrib.auth.models.User.date_joined'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    groups = sa.orm.relationship(
        'Group',
        secondary="auth_user_groups",
        foreign_keys="[auth_user_groups.c.user_id, auth_user_groups.c.group_id]",
        remote_side=None,
    )
    user_permissions = sa.orm.relationship(
        'Permission',
        secondary="auth_user_user_permissions",
        foreign_keys="[auth_user_user_permissions.c.user_id, auth_user_user_permissions.c.permission_id]",
        remote_side=None,
    )


class Session(Base):
    __tablename__ = 'django_session'
    
    session_key = sa.Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    session_data = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expire_date = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Author(Base):
    __tablename__ = 'author'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    age = sa.Column(
        postgresql_types.SMALLINT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    email = sa.Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=False,
        nullable=True,
    )


class BookCategory(Base):
    __tablename__ = 'book_category'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    book_id = sa.Column(
        postgresql_types.UUID(),
        sa.ForeignKey(column="book.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    category_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="category.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    book = sa.orm.relationship(
        'Book',
        foreign_keys="[book_category.c.book_id]",
        remote_side=None,
    )
    category = sa.orm.relationship(
        'Category',
        foreign_keys="[book_category.c.category_id]",
        remote_side=None,
    )


class Book(Base):
    __tablename__ = 'book'
    
    id = sa.Column(
        postgresql_types.UUID(),
        default=GET_DEFAULT('books.models.Book.id'),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    price = sa.Column(
        postgresql_types.JSONB(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    title = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    description = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    author_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="author.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    content = sa.Column(
        postgresql_types.BYTEA(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    tags = sa.Column(
        postgresql_types.ARRAY(item_type=postgresql_types.VARCHAR, dimensions=1),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    author = sa.orm.relationship(
        'Author',
        foreign_keys="[book.c.author_id]",
        remote_side=None,
    )
    category = sa.orm.relationship(
        'Category',
        secondary="book_category",
        foreign_keys="[book_category.c.book_id, book_category.c.category_id]",
        remote_side=None,
    )


class CategoryRelation(Base):
    __tablename__ = 'category_relation'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    category1_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="category.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    category2_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="category.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    type = sa.Column(
        postgresql_types.VARCHAR(length=30),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    category1 = sa.orm.relationship(
        'Category',
        foreign_keys="[category_relation.c.category1_id]",
        remote_side=None,
    )
    category2 = sa.orm.relationship(
        'Category',
        foreign_keys="[category_relation.c.category2_id]",
        remote_side=None,
    )


class Category(Base):
    __tablename__ = 'category'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        CIText(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    created = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    related_coming = sa.orm.relationship(
        'Category',
        secondary="category_relation",
        foreign_keys="[category_relation.c.category1_id]",
        remote_side="[category.c.id]",
    )


class Sales(Base):
    __tablename__ = 'sales'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    book_id = sa.Column(
        postgresql_types.UUID(),
        sa.ForeignKey(column="book.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    sold = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    reservation = sa.Column(
        postgresql_types.INTERVAL(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    source = sa.Column(
        postgresql_types.INET(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    book = sa.orm.relationship(
        'Book',
        foreign_keys="[sales.c.book_id]",
        remote_side=None,
    )



